package br.gov.sp.fatec.trampoz_api.users;

import br.gov.sp.fatec.trampoz_api.marketing_newsletters.MarketingNewsletterEntity;
import br.gov.sp.fatec.trampoz_api.roles.RoleEntity;
import br.gov.sp.fatec.trampoz_api.roles.RolesEnum;
import br.gov.sp.fatec.trampoz_api.shared.AutoGeneratedId;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;
import java.sql.Date;
import java.util.*;

@Getter
@Setter
@NoArgsConstructor
@Table(name = "usr_user")
@Entity
@Inheritance(strategy = InheritanceType.JOINED)
@AttributeOverride(name = "id", column = @Column(name = "usr_id"))
public abstract class UserEntity extends AutoGeneratedId {
    public UserEntity(String name, String email, String password, Date birthday, Character gender) {
        setName(name);
        setEmail(email);
        setPassword(password);
        setBirthday(birthday);
        setGender(gender);
    }

    @Column(name = "usr_name")
    private String name;

    @Column(name = "usr_email")
    private String email;

    @Column(name = "usr_password")
    private String password;

    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-mm-dd")
    @Column(name = "usr_birthday")
    private Date birthday;

    @Column(name = "usr_gender")
    private Character gender;

    @JsonIgnore
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "mnew_id")
    private MarketingNewsletterEntity marketingNewsletter;

    @JsonIgnore
    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(
            name = "rpu_role_per_user",
            joinColumns = {@JoinColumn(name = "usr_id")},
            inverseJoinColumns = {@JoinColumn(name = "rol_id")}
    )
    private Set<RoleEntity> roles = new HashSet<>();

    public Boolean addRole(RoleEntity role) {
        return roles.add(role);
    }

    public Boolean checkIfCredentialsAreValid(String email, String password) {
        Boolean sameEmail = this.getEmail().equals(email);
        Boolean samePassword = this.getPassword().equals(password);

        return sameEmail && samePassword;
    }
}
